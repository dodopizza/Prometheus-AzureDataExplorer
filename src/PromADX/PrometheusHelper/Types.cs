// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: types.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Prometheus {

  /// <summary>Holder for reflection information generated from types.proto</summary>
  public static partial class TypesReflection {

    #region Descriptor
    /// <summary>File descriptor for types.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TypesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgt0eXBlcy5wcm90bxIKcHJvbWV0aGV1cxoUZ29nb3Byb3RvL2dvZ28ucHJv",
            "dG8iKgoGU2FtcGxlEg0KBXZhbHVlGAEgASgBEhEKCXRpbWVzdGFtcBgCIAEo",
            "AyJgCgpUaW1lU2VyaWVzEicKBmxhYmVscxgBIAMoCzIRLnByb21ldGhldXMu",
            "TGFiZWxCBMjeHwASKQoHc2FtcGxlcxgCIAMoCzISLnByb21ldGhldXMuU2Ft",
            "cGxlQgTI3h8AIiQKBUxhYmVsEgwKBG5hbWUYASABKAkSDQoFdmFsdWUYAiAB",
            "KAkiMQoGTGFiZWxzEicKBmxhYmVscxgBIAMoCzIRLnByb21ldGhldXMuTGFi",
            "ZWxCBMjeHwAiggEKDExhYmVsTWF0Y2hlchIrCgR0eXBlGAEgASgOMh0ucHJv",
            "bWV0aGV1cy5MYWJlbE1hdGNoZXIuVHlwZRIMCgRuYW1lGAIgASgJEg0KBXZh",
            "bHVlGAMgASgJIigKBFR5cGUSBgoCRVEQABIHCgNORVEQARIGCgJSRRACEgcK",
            "A05SRRADInwKCVJlYWRIaW50cxIPCgdzdGVwX21zGAEgASgDEgwKBGZ1bmMY",
            "AiABKAkSEAoIc3RhcnRfbXMYAyABKAMSDgoGZW5kX21zGAQgASgDEhAKCGdy",
            "b3VwaW5nGAUgAygJEgoKAmJ5GAYgASgIEhAKCHJhbmdlX21zGAcgASgDIosB",
            "CgVDaHVuaxITCgttaW5fdGltZV9tcxgBIAEoAxITCgttYXhfdGltZV9tcxgC",
            "IAEoAxIoCgR0eXBlGAMgASgOMhoucHJvbWV0aGV1cy5DaHVuay5FbmNvZGlu",
            "ZxIMCgRkYXRhGAQgASgMIiAKCEVuY29kaW5nEgsKB1VOS05PV04QABIHCgNY",
            "T1IQASJhCg1DaHVua2VkU2VyaWVzEicKBmxhYmVscxgBIAMoCzIRLnByb21l",
            "dGhldXMuTGFiZWxCBMjeHwASJwoGY2h1bmtzGAIgAygLMhEucHJvbWV0aGV1",
            "cy5DaHVua0IEyN4fAEIIWgZwcm9tcGJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Gogoproto.GogoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Prometheus.Sample), global::Prometheus.Sample.Parser, new[]{ "Value", "Timestamp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Prometheus.TimeSeries), global::Prometheus.TimeSeries.Parser, new[]{ "Labels", "Samples" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Prometheus.Label), global::Prometheus.Label.Parser, new[]{ "Name", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Prometheus.Labels), global::Prometheus.Labels.Parser, new[]{ "Labels_" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Prometheus.LabelMatcher), global::Prometheus.LabelMatcher.Parser, new[]{ "Type", "Name", "Value" }, null, new[]{ typeof(global::Prometheus.LabelMatcher.Types.Type) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Prometheus.ReadHints), global::Prometheus.ReadHints.Parser, new[]{ "StepMs", "Func", "StartMs", "EndMs", "Grouping", "By", "RangeMs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Prometheus.Chunk), global::Prometheus.Chunk.Parser, new[]{ "MinTimeMs", "MaxTimeMs", "Type", "Data" }, null, new[]{ typeof(global::Prometheus.Chunk.Types.Encoding) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Prometheus.ChunkedSeries), global::Prometheus.ChunkedSeries.Parser, new[]{ "Labels", "Chunks" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Sample : pb::IMessage<Sample> {
    private static readonly pb::MessageParser<Sample> _parser = new pb::MessageParser<Sample>(() => new Sample());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Sample> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prometheus.TypesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sample() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sample(Sample other) : this() {
      value_ = other.value_;
      timestamp_ = other.timestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sample Clone() {
      return new Sample(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private double value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Sample);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Sample other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Value, other.Value)) return false;
      if (Timestamp != other.Timestamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Value);
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Value);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0D) {
        size += 1 + 8;
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Sample other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0D) {
        Value = other.Value;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Value = input.ReadDouble();
            break;
          }
          case 16: {
            Timestamp = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TimeSeries represents samples and labels for a single time series.
  /// </summary>
  public sealed partial class TimeSeries : pb::IMessage<TimeSeries> {
    private static readonly pb::MessageParser<TimeSeries> _parser = new pb::MessageParser<TimeSeries>(() => new TimeSeries());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeSeries> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prometheus.TypesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeSeries() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeSeries(TimeSeries other) : this() {
      labels_ = other.labels_.Clone();
      samples_ = other.samples_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeSeries Clone() {
      return new TimeSeries(this);
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Prometheus.Label> _repeated_labels_codec
        = pb::FieldCodec.ForMessage(10, global::Prometheus.Label.Parser);
    private readonly pbc::RepeatedField<global::Prometheus.Label> labels_ = new pbc::RepeatedField<global::Prometheus.Label>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Prometheus.Label> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "samples" field.</summary>
    public const int SamplesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Prometheus.Sample> _repeated_samples_codec
        = pb::FieldCodec.ForMessage(18, global::Prometheus.Sample.Parser);
    private readonly pbc::RepeatedField<global::Prometheus.Sample> samples_ = new pbc::RepeatedField<global::Prometheus.Sample>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Prometheus.Sample> Samples {
      get { return samples_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeSeries);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeSeries other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!labels_.Equals(other.labels_)) return false;
      if(!samples_.Equals(other.samples_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= labels_.GetHashCode();
      hash ^= samples_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      labels_.WriteTo(output, _repeated_labels_codec);
      samples_.WriteTo(output, _repeated_samples_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += labels_.CalculateSize(_repeated_labels_codec);
      size += samples_.CalculateSize(_repeated_samples_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeSeries other) {
      if (other == null) {
        return;
      }
      labels_.Add(other.labels_);
      samples_.Add(other.samples_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            labels_.AddEntriesFrom(input, _repeated_labels_codec);
            break;
          }
          case 18: {
            samples_.AddEntriesFrom(input, _repeated_samples_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Label : pb::IMessage<Label> {
    private static readonly pb::MessageParser<Label> _parser = new pb::MessageParser<Label>(() => new Label());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Label> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prometheus.TypesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Label() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Label(Label other) : this() {
      name_ = other.name_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Label Clone() {
      return new Label(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Label);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Label other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Label other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Labels : pb::IMessage<Labels> {
    private static readonly pb::MessageParser<Labels> _parser = new pb::MessageParser<Labels>(() => new Labels());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Labels> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prometheus.TypesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Labels() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Labels(Labels other) : this() {
      labels_ = other.labels_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Labels Clone() {
      return new Labels(this);
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int Labels_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::Prometheus.Label> _repeated_labels_codec
        = pb::FieldCodec.ForMessage(10, global::Prometheus.Label.Parser);
    private readonly pbc::RepeatedField<global::Prometheus.Label> labels_ = new pbc::RepeatedField<global::Prometheus.Label>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Prometheus.Label> Labels_ {
      get { return labels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Labels);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Labels other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!labels_.Equals(other.labels_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= labels_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      labels_.WriteTo(output, _repeated_labels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += labels_.CalculateSize(_repeated_labels_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Labels other) {
      if (other == null) {
        return;
      }
      labels_.Add(other.labels_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            labels_.AddEntriesFrom(input, _repeated_labels_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Matcher specifies a rule, which can match or set of labels or not.
  /// </summary>
  public sealed partial class LabelMatcher : pb::IMessage<LabelMatcher> {
    private static readonly pb::MessageParser<LabelMatcher> _parser = new pb::MessageParser<LabelMatcher>(() => new LabelMatcher());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LabelMatcher> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prometheus.TypesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabelMatcher() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabelMatcher(LabelMatcher other) : this() {
      type_ = other.type_;
      name_ = other.name_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabelMatcher Clone() {
      return new LabelMatcher(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Prometheus.LabelMatcher.Types.Type type_ = global::Prometheus.LabelMatcher.Types.Type.Eq;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Prometheus.LabelMatcher.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LabelMatcher);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LabelMatcher other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Name != other.Name) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::Prometheus.LabelMatcher.Types.Type.Eq) hash ^= Type.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != global::Prometheus.LabelMatcher.Types.Type.Eq) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::Prometheus.LabelMatcher.Types.Type.Eq) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LabelMatcher other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::Prometheus.LabelMatcher.Types.Type.Eq) {
        Type = other.Type;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Prometheus.LabelMatcher.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LabelMatcher message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("EQ")] Eq = 0,
        [pbr::OriginalName("NEQ")] Neq = 1,
        [pbr::OriginalName("RE")] Re = 2,
        [pbr::OriginalName("NRE")] Nre = 3,
      }

    }
    #endregion

  }

  public sealed partial class ReadHints : pb::IMessage<ReadHints> {
    private static readonly pb::MessageParser<ReadHints> _parser = new pb::MessageParser<ReadHints>(() => new ReadHints());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReadHints> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prometheus.TypesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadHints() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadHints(ReadHints other) : this() {
      stepMs_ = other.stepMs_;
      func_ = other.func_;
      startMs_ = other.startMs_;
      endMs_ = other.endMs_;
      grouping_ = other.grouping_.Clone();
      by_ = other.by_;
      rangeMs_ = other.rangeMs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadHints Clone() {
      return new ReadHints(this);
    }

    /// <summary>Field number for the "step_ms" field.</summary>
    public const int StepMsFieldNumber = 1;
    private long stepMs_;
    /// <summary>
    /// Query step size in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StepMs {
      get { return stepMs_; }
      set {
        stepMs_ = value;
      }
    }

    /// <summary>Field number for the "func" field.</summary>
    public const int FuncFieldNumber = 2;
    private string func_ = "";
    /// <summary>
    /// String representation of surrounding function or aggregation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Func {
      get { return func_; }
      set {
        func_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start_ms" field.</summary>
    public const int StartMsFieldNumber = 3;
    private long startMs_;
    /// <summary>
    /// Start time in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartMs {
      get { return startMs_; }
      set {
        startMs_ = value;
      }
    }

    /// <summary>Field number for the "end_ms" field.</summary>
    public const int EndMsFieldNumber = 4;
    private long endMs_;
    /// <summary>
    /// End time in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndMs {
      get { return endMs_; }
      set {
        endMs_ = value;
      }
    }

    /// <summary>Field number for the "grouping" field.</summary>
    public const int GroupingFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_grouping_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> grouping_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of label names used in aggregation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Grouping {
      get { return grouping_; }
    }

    /// <summary>Field number for the "by" field.</summary>
    public const int ByFieldNumber = 6;
    private bool by_;
    /// <summary>
    /// Indicate whether it is without or by.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool By {
      get { return by_; }
      set {
        by_ = value;
      }
    }

    /// <summary>Field number for the "range_ms" field.</summary>
    public const int RangeMsFieldNumber = 7;
    private long rangeMs_;
    /// <summary>
    /// Range vector selector range in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RangeMs {
      get { return rangeMs_; }
      set {
        rangeMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReadHints);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReadHints other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StepMs != other.StepMs) return false;
      if (Func != other.Func) return false;
      if (StartMs != other.StartMs) return false;
      if (EndMs != other.EndMs) return false;
      if(!grouping_.Equals(other.grouping_)) return false;
      if (By != other.By) return false;
      if (RangeMs != other.RangeMs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StepMs != 0L) hash ^= StepMs.GetHashCode();
      if (Func.Length != 0) hash ^= Func.GetHashCode();
      if (StartMs != 0L) hash ^= StartMs.GetHashCode();
      if (EndMs != 0L) hash ^= EndMs.GetHashCode();
      hash ^= grouping_.GetHashCode();
      if (By != false) hash ^= By.GetHashCode();
      if (RangeMs != 0L) hash ^= RangeMs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StepMs != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(StepMs);
      }
      if (Func.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Func);
      }
      if (StartMs != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(StartMs);
      }
      if (EndMs != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(EndMs);
      }
      grouping_.WriteTo(output, _repeated_grouping_codec);
      if (By != false) {
        output.WriteRawTag(48);
        output.WriteBool(By);
      }
      if (RangeMs != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(RangeMs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StepMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StepMs);
      }
      if (Func.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Func);
      }
      if (StartMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartMs);
      }
      if (EndMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndMs);
      }
      size += grouping_.CalculateSize(_repeated_grouping_codec);
      if (By != false) {
        size += 1 + 1;
      }
      if (RangeMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RangeMs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReadHints other) {
      if (other == null) {
        return;
      }
      if (other.StepMs != 0L) {
        StepMs = other.StepMs;
      }
      if (other.Func.Length != 0) {
        Func = other.Func;
      }
      if (other.StartMs != 0L) {
        StartMs = other.StartMs;
      }
      if (other.EndMs != 0L) {
        EndMs = other.EndMs;
      }
      grouping_.Add(other.grouping_);
      if (other.By != false) {
        By = other.By;
      }
      if (other.RangeMs != 0L) {
        RangeMs = other.RangeMs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StepMs = input.ReadInt64();
            break;
          }
          case 18: {
            Func = input.ReadString();
            break;
          }
          case 24: {
            StartMs = input.ReadInt64();
            break;
          }
          case 32: {
            EndMs = input.ReadInt64();
            break;
          }
          case 42: {
            grouping_.AddEntriesFrom(input, _repeated_grouping_codec);
            break;
          }
          case 48: {
            By = input.ReadBool();
            break;
          }
          case 56: {
            RangeMs = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Chunk represents a TSDB chunk.
  /// Time range [min, max] is inclusive.
  /// </summary>
  public sealed partial class Chunk : pb::IMessage<Chunk> {
    private static readonly pb::MessageParser<Chunk> _parser = new pb::MessageParser<Chunk>(() => new Chunk());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Chunk> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prometheus.TypesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chunk() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chunk(Chunk other) : this() {
      minTimeMs_ = other.minTimeMs_;
      maxTimeMs_ = other.maxTimeMs_;
      type_ = other.type_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chunk Clone() {
      return new Chunk(this);
    }

    /// <summary>Field number for the "min_time_ms" field.</summary>
    public const int MinTimeMsFieldNumber = 1;
    private long minTimeMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MinTimeMs {
      get { return minTimeMs_; }
      set {
        minTimeMs_ = value;
      }
    }

    /// <summary>Field number for the "max_time_ms" field.</summary>
    public const int MaxTimeMsFieldNumber = 2;
    private long maxTimeMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxTimeMs {
      get { return maxTimeMs_; }
      set {
        maxTimeMs_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::Prometheus.Chunk.Types.Encoding type_ = global::Prometheus.Chunk.Types.Encoding.Unknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Prometheus.Chunk.Types.Encoding Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 4;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Chunk);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Chunk other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MinTimeMs != other.MinTimeMs) return false;
      if (MaxTimeMs != other.MaxTimeMs) return false;
      if (Type != other.Type) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MinTimeMs != 0L) hash ^= MinTimeMs.GetHashCode();
      if (MaxTimeMs != 0L) hash ^= MaxTimeMs.GetHashCode();
      if (Type != global::Prometheus.Chunk.Types.Encoding.Unknown) hash ^= Type.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MinTimeMs != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MinTimeMs);
      }
      if (MaxTimeMs != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MaxTimeMs);
      }
      if (Type != global::Prometheus.Chunk.Types.Encoding.Unknown) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MinTimeMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinTimeMs);
      }
      if (MaxTimeMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxTimeMs);
      }
      if (Type != global::Prometheus.Chunk.Types.Encoding.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Chunk other) {
      if (other == null) {
        return;
      }
      if (other.MinTimeMs != 0L) {
        MinTimeMs = other.MinTimeMs;
      }
      if (other.MaxTimeMs != 0L) {
        MaxTimeMs = other.MaxTimeMs;
      }
      if (other.Type != global::Prometheus.Chunk.Types.Encoding.Unknown) {
        Type = other.Type;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MinTimeMs = input.ReadInt64();
            break;
          }
          case 16: {
            MaxTimeMs = input.ReadInt64();
            break;
          }
          case 24: {
            Type = (global::Prometheus.Chunk.Types.Encoding) input.ReadEnum();
            break;
          }
          case 34: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Chunk message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// We require this to match chunkenc.Encoding.
      /// </summary>
      public enum Encoding {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("XOR")] Xor = 1,
      }

    }
    #endregion

  }

  /// <summary>
  /// ChunkedSeries represents single, encoded time series.
  /// </summary>
  public sealed partial class ChunkedSeries : pb::IMessage<ChunkedSeries> {
    private static readonly pb::MessageParser<ChunkedSeries> _parser = new pb::MessageParser<ChunkedSeries>(() => new ChunkedSeries());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChunkedSeries> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prometheus.TypesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChunkedSeries() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChunkedSeries(ChunkedSeries other) : this() {
      labels_ = other.labels_.Clone();
      chunks_ = other.chunks_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChunkedSeries Clone() {
      return new ChunkedSeries(this);
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Prometheus.Label> _repeated_labels_codec
        = pb::FieldCodec.ForMessage(10, global::Prometheus.Label.Parser);
    private readonly pbc::RepeatedField<global::Prometheus.Label> labels_ = new pbc::RepeatedField<global::Prometheus.Label>();
    /// <summary>
    /// Labels should be sorted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Prometheus.Label> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "chunks" field.</summary>
    public const int ChunksFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Prometheus.Chunk> _repeated_chunks_codec
        = pb::FieldCodec.ForMessage(18, global::Prometheus.Chunk.Parser);
    private readonly pbc::RepeatedField<global::Prometheus.Chunk> chunks_ = new pbc::RepeatedField<global::Prometheus.Chunk>();
    /// <summary>
    /// Chunks will be in start time order and may overlap.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Prometheus.Chunk> Chunks {
      get { return chunks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChunkedSeries);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChunkedSeries other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!labels_.Equals(other.labels_)) return false;
      if(!chunks_.Equals(other.chunks_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= labels_.GetHashCode();
      hash ^= chunks_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      labels_.WriteTo(output, _repeated_labels_codec);
      chunks_.WriteTo(output, _repeated_chunks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += labels_.CalculateSize(_repeated_labels_codec);
      size += chunks_.CalculateSize(_repeated_chunks_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChunkedSeries other) {
      if (other == null) {
        return;
      }
      labels_.Add(other.labels_);
      chunks_.Add(other.chunks_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            labels_.AddEntriesFrom(input, _repeated_labels_codec);
            break;
          }
          case 18: {
            chunks_.AddEntriesFrom(input, _repeated_chunks_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
